(ns cmr.umm-spec.location-keywords
  "Helper utilities for converting Spatial or Location Keywords to UMM LocationKeywords."
  (:require
    [clojure.set :as set]
    [clojure.string :as str]
    [cmr.common-app.services.kms-lookup :as kms-lookup]
    [cmr.common.util :as util]
    [cmr.umm-spec.models.umm-collection-models :as umm-c]))

(def location-keyword-order
  "Defines the order of hierarchical keywords for LocationKeywords"
  [:Category :Type :Subregion1 :Subregion2 :Subregion3])

(def cache-location-keywords->umm-location-keywords
  "Mapping for renaming values generated by the kms fetcher to LocationKeyword UMM keys"
  {:category :Category
   :type :Type
   :subregion-1 :Subregion1
   :subregion-2 :Subregion2
   :subregion-3 :Subregion3
   :detailed-location :DetailedLocation})

(defn- find-spatial-keyword
  "Finds spatial keywords in the hierarchy and pick the one with the fewest keys (e.g. shortest
  hierarchical depth.) Takes a string keyword as a parameter, a list of keyword maps and returns
  the map of hierarichies which contain the keyword (treated case insensitive).
  You can also pass :uuid as a keyword argument e.g. 'afbc0a01-742e-49da-939e-3eaa3cf431b0' for
  'BLACK SEA'. If the keyword is a duplicate, it will substitute the correct one."
  [kms-index location-string]
  (or (kms-lookup/lookup-by-location-string kms-index location-string)
      {:category "OTHER" :type location-string}))

(defn spatial-keywords->location-keywords
  "Takes a keyword map list and a list of Spatial Keywords and returns a list of location keyword maps
  for that kms-index"
  [kms-index spatial-keywords]
  (map (fn [keyword]
         (dissoc
          (set/rename-keys
            (find-spatial-keyword kms-index keyword)
            cache-location-keywords->umm-location-keywords)
          :uuid))
       spatial-keywords))

(defn- location-values
  "Returns the location keyword values in order so that we can get the last one"
  [location-keyword]
  (for [k location-keyword-order
        :let [value (get location-keyword k)]
        :when value]
    value))

(defn- leaf-value
  "Returns the leaf value of the location-keyword object to be put in a SpatialKeywords list"
  [location-keyword]
  (last (location-values location-keyword)))

(defn location-keywords->spatial-keywords
  "Converts a list of LocationKeyword maps to a list of SpatialKeywords"
  [location-keyword-list]
  (map #(leaf-value %) location-keyword-list))

(defn translate-spatial-keywords
  "Translates a list of spatial keywords into an array of LocationKeyword type objects"
  [kms-index spatial-keywords]
  (let [location-keyword-maps (spatial-keywords->location-keywords kms-index spatial-keywords)
        umm-location-keyword-maps (seq
                                   (map
                                    #(dissoc
                                      (set/rename-keys % cache-location-keywords->umm-location-keywords)
                                      :uuid)
                                    location-keyword-maps))]
    umm-location-keyword-maps))
